/*
 * Created on 03/jul/2011
 *
 * Copyright 2010 by Andrea Vacondio (andrea.vacondio@gmail.com).
 * 
 * This file is part of the Sejda source code
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.sejda.impl.itext.component;

import java.io.Closeable;
import java.util.List;
import java.util.Map;

import org.sejda.model.exception.TaskException;
import org.sejda.model.exception.TaskIOException;

import com.lowagie.text.pdf.PdfPageLabels;
import com.lowagie.text.pdf.PdfReader;

/**
 * Provides functionalities to copy pages from a given {@link PdfReader}.
 * 
 * @author Andrea Vacondio
 * 
 */
public interface PdfCopier extends Closeable {

    /**
     * Adds the given page extracted from the input reader.
     * 
     * @param reader
     * @param pageNumber
     * @throws TaskException
     */
    void addPage(PdfReader reader, int pageNumber) throws TaskException;

    /**
     * Adds all the pages from the input reader
     * 
     * @param reader
     * @throws TaskException
     */
    void addAllPages(PdfReader reader) throws TaskException;

    /**
     * Adds a blank page to the current underlying document.
     * 
     * @param reader
     *            the reader to use to get page size and rotation.
     */
    void addBlankPage(PdfReader reader);

    /**
     * Adds a blank page to the current underlying document if the total number of written pages is odd.
     * 
     * @param reader
     *            the reader to use to get page size and rotation.
     */
    void addBlankPageIfOdd(PdfReader reader);

    /**
     * Enables compression of the xref streams if compress is true.
     * 
     * @param compress
     */
    void setCompression(boolean compress);

    /**
     * sets the input page labels to the underlying pdf copy.
     * 
     * @param labels
     */
    void setPageLabels(PdfPageLabels labels);

    /**
     * Frees the reader on the underlying pdf copy.
     * 
     * @param reader
     * @throws TaskIOException
     */
    void freeReader(PdfReader reader) throws TaskIOException;

    /**
     * Sets the outline on the document generated by this copier.
     * 
     * @param outline
     */
    void setOutline(List<Map<String, Object>> outline);

    /**
     * @return the number of pages this copier has copied
     */
    int getNumberOfCopiedPages();

}
