<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                             http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>org.sejda</groupId>
	<artifactId>sejda-parent</artifactId>
	<packaging>pom</packaging>
	<name>sejda</name>
	<version>1.0.0-BETA-SNAPSHOT</version>
	<url>http://www.sejda.org</url>
	<description>An extendible and configurable PDF manipulation layer library. A ready to use java library to perform PDF documents manipulation without having to deal with the low level API. Sejda offers many "ready to go" manipulations implemented using the iText, PDFBox or ICEpdf but it can be extended and/or configured to use other implementations.</description>

	<!-- required to deploy Snapshots and Stage Releases to Maven Central -->
	<parent>
		<groupId>org.sonatype.oss</groupId>
		<artifactId>oss-parent</artifactId>
		<version>7</version>
	</parent>

	<modules>
		<module>../sejda-core</module>
		<module>../sejda-itext</module>
		<module>../sejda-pdfbox</module>
		<module>../sejda-icepdf</module>
		<module>../sejda-console</module>
		<module>../sejda-image-writers</module>
		<module>../sejda-distribution</module>
	</modules>

	<issueManagement>
		<system>BitBucket</system>
		<url>https://bitbucket.org/torakiki/sejda/issues/</url>
	</issueManagement>

	<organization>
		<name>sejda</name>
		<url>http://www.sejda.org</url>
	</organization>

	<licenses>
		<license>
			<name>Apache License, Version 2.0</name>
			<url>http://www.apache.org/licenses/LICENSE-2.0</url>
			<distribution>repo</distribution>
			<comments>ASLv2</comments>
		</license>
	</licenses>

	<scm>
		<connection>scm:hg:https://bitbucket.org/torakiki/sejda</connection>
		<developerConnection>scm:hg:https://bitbucket.org/torakiki/sejda</developerConnection>
		<url>https://bitbucket.org/torakiki/sejda/src</url>
	</scm>

	<developers>
		<developer>
			<id>torakiki</id>
			<name>Andrea Vacondio</name>
			<email>andrea.vacondio@gmail.com</email>
		</developer>
		<developer>
			<id>ediweissmann</id>
			<name>Eduard Weissmann</name>
			<email>edi.weissmann@gmail.com</email>
		</developer>
	</developers>

	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>2.3.2</version>
					<configuration>
						<source>1.5</source>
						<target>1.5</target>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-assembly-plugin</artifactId>
					<version>2.2.1</version>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-release-plugin</artifactId>
				<version>2.2.1</version>
				<configuration>
					<tagNameFormat>v@{project.version}</tagNameFormat>
					<autoVersionSubmodules>true</autoVersionSubmodules>
					<goals>deploy</goals>
					<preparationGoals>clean verify install</preparationGoals>
					<localCheckout>true</localCheckout>
					<pushChanges>false</pushChanges>
					<!-- activates the release profile, which executes the plugin(s) creating 
						the bin assemblies -->
					<releaseProfiles>release</releaseProfiles>
					<!-- You will want to configure <mavenExecutorId>forked-path</mavenExecutorId> 
						for maven-release-plugin to get around a GPG plugin hanging issue -->
					<!-- Because maven-release-plugin will start a new Maven instance, gpg 
						plugin's -Dgpg.passphrase=PASSPHRASE won't work in this case, instead, you 
						should use mvn release:perform -Darguments=-Dgpg.passphrase=PASSPHRASE -->
				</configuration>
			</plugin>
		</plugins>
	</build>

	<properties>
		<junit.version>4.10</junit.version>
		<slf4j.version>1.6.2</slf4j.version>
		<dom4j.version>1.6.1</dom4j.version>
		<jaxen.version>1.1.1</jaxen.version>
		<commons.lang.version>3.0.1</commons.lang.version>
		<commons.io.version>2.1</commons.io.version>
		<commons.collections.version>3.2.1</commons.collections.version>
		<validation.api.version>1.0.0.GA</validation.api.version>
		<mockito.version>1.9.0-rc1</mockito.version>
		<powermock.version>1.4.10</powermock.version>
		<itextpdf.version>2.1.7</itextpdf.version>
		<logback.version>0.9.29</logback.version>
		<jdepend.version>2.9.1</jdepend.version>
		<hibernate-validator.version>4.2.0.Final</hibernate-validator.version>
		<!-- so that build is not platform dependent via encoding -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>

	<repositories>
		<repository>
			<id>jboss</id>
			<url>https://repository.jboss.org/nexus/content/repositories/public/</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
	</repositories>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>dom4j</groupId>
				<artifactId>dom4j</artifactId>
				<version>${dom4j.version}</version>
			</dependency>
			<dependency>
				<groupId>javax.validation</groupId>
				<artifactId>validation-api</artifactId>
				<version>${validation.api.version}</version>
			</dependency>
			<dependency>
				<groupId>commons-io</groupId>
				<artifactId>commons-io</artifactId>
				<version>${commons.io.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.commons</groupId>
				<artifactId>commons-lang3</artifactId>
				<version>${commons.lang.version}</version>
			</dependency>
			<dependency>
				<groupId>commons-collections</groupId>
				<artifactId>commons-collections</artifactId>
				<version>${commons.collections.version}</version>
			</dependency>
			<dependency>
				<groupId>jdepend</groupId>
				<artifactId>jdepend</artifactId>
				<version>${jdepend.version}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>jaxen</groupId>
				<artifactId>jaxen</artifactId>
				<version>${jaxen.version}</version>
				<exclusions>
					<exclusion>
						<groupId>xom</groupId>
						<artifactId>xom</artifactId>
					</exclusion>
					<exclusion>
						<groupId>jdom</groupId>
						<artifactId>jdom</artifactId>
					</exclusion>
				</exclusions>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>[${logback.version},]</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${slf4j.version}</version>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-all</artifactId>
			<version>${mockito.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.powermock</groupId>
			<artifactId>powermock-module-junit4</artifactId>
			<version>${powermock.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.powermock</groupId>
			<artifactId>powermock-api-mockito</artifactId>
			<version>${powermock.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.lowagie</groupId>
			<artifactId>itext</artifactId>
			<version>${itextpdf.version}</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<profiles>
		<profile>
			<id>release</id>
			<activation>
				<!-- This profile will be activated when the value of maven property 
					performRelease is true. When you use maven-release-plugin and run mvn release:perform, 
					the property value will be set to true. -->
				<property>
					<name>performRelease</name>
					<value>true</value>
				</property>
			</activation>
			<build>
				<plugins>
					<!-- signs the artifacts, see https://docs.sonatype.org/display/Repository/How+To+Generate+PGP+Signatures+With+Maven -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-gpg-plugin</artifactId>
						<version>1.4</version>
						<executions>
							<execution>
								<id>sign-artifacts</id>
								<!-- install and not verify because the plugin needs to sign artifacts 
									created during package phase -->
								<phase>install</phase>
								<goals>
									<goal>sign</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

</project>